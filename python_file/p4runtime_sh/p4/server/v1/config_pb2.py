# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p4/server/v1/config.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='p4/server/v1/config.proto',
  package='p4.server.v1',
  syntax='proto3',
  serialized_pb=_b('\n\x19p4/server/v1/config.proto\x12\x0cp4.server.v1\"E\n\nSetRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\x04\x12$\n\x06\x63onfig\x18\x02 \x01(\x0b\x32\x14.p4.server.v1.Config\"\r\n\x0bSetResponse\"\x1f\n\nGetRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\x04\"3\n\x0bGetResponse\x12$\n\x06\x63onfig\x18\x01 \x01(\x0b\x32\x14.p4.server.v1.Config\"4\n\x06\x43onfig\x12*\n\x06stream\x18\x01 \x01(\x0b\x32\x1a.p4.server.v1.StreamConfig\"\x97\x01\n\x0cStreamConfig\x12G\n\x0f\x65rror_reporting\x18\x01 \x01(\x0e\x32..p4.server.v1.StreamConfig.ErrorReportingLevel\">\n\x13\x45rrorReportingLevel\x12\x0c\n\x08\x44ISABLED\x10\x00\x12\x0b\n\x07\x45NABLED\x10\x01\x12\x0c\n\x08\x44\x45TAILED\x10\x02\x32\x86\x01\n\x0cServerConfig\x12:\n\x03Set\x12\x18.p4.server.v1.SetRequest\x1a\x19.p4.server.v1.SetResponse\x12:\n\x03Get\x12\x18.p4.server.v1.GetRequest\x1a\x19.p4.server.v1.GetResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_STREAMCONFIG_ERRORREPORTINGLEVEL = _descriptor.EnumDescriptor(
  name='ErrorReportingLevel',
  full_name='p4.server.v1.StreamConfig.ErrorReportingLevel',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DISABLED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENABLED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DETAILED', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=359,
  serialized_end=421,
)
_sym_db.RegisterEnumDescriptor(_STREAMCONFIG_ERRORREPORTINGLEVEL)


_SETREQUEST = _descriptor.Descriptor(
  name='SetRequest',
  full_name='p4.server.v1.SetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='p4.server.v1.SetRequest.device_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='config', full_name='p4.server.v1.SetRequest.config', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=43,
  serialized_end=112,
)


_SETRESPONSE = _descriptor.Descriptor(
  name='SetResponse',
  full_name='p4.server.v1.SetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=127,
)


_GETREQUEST = _descriptor.Descriptor(
  name='GetRequest',
  full_name='p4.server.v1.GetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='p4.server.v1.GetRequest.device_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=129,
  serialized_end=160,
)


_GETRESPONSE = _descriptor.Descriptor(
  name='GetResponse',
  full_name='p4.server.v1.GetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='p4.server.v1.GetResponse.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=162,
  serialized_end=213,
)


_CONFIG = _descriptor.Descriptor(
  name='Config',
  full_name='p4.server.v1.Config',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stream', full_name='p4.server.v1.Config.stream', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=215,
  serialized_end=267,
)


_STREAMCONFIG = _descriptor.Descriptor(
  name='StreamConfig',
  full_name='p4.server.v1.StreamConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error_reporting', full_name='p4.server.v1.StreamConfig.error_reporting', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _STREAMCONFIG_ERRORREPORTINGLEVEL,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=270,
  serialized_end=421,
)

_SETREQUEST.fields_by_name['config'].message_type = _CONFIG
_GETRESPONSE.fields_by_name['config'].message_type = _CONFIG
_CONFIG.fields_by_name['stream'].message_type = _STREAMCONFIG
_STREAMCONFIG.fields_by_name['error_reporting'].enum_type = _STREAMCONFIG_ERRORREPORTINGLEVEL
_STREAMCONFIG_ERRORREPORTINGLEVEL.containing_type = _STREAMCONFIG
DESCRIPTOR.message_types_by_name['SetRequest'] = _SETREQUEST
DESCRIPTOR.message_types_by_name['SetResponse'] = _SETRESPONSE
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['GetResponse'] = _GETRESPONSE
DESCRIPTOR.message_types_by_name['Config'] = _CONFIG
DESCRIPTOR.message_types_by_name['StreamConfig'] = _STREAMCONFIG

SetRequest = _reflection.GeneratedProtocolMessageType('SetRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETREQUEST,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.SetRequest)
  ))
_sym_db.RegisterMessage(SetRequest)

SetResponse = _reflection.GeneratedProtocolMessageType('SetResponse', (_message.Message,), dict(
  DESCRIPTOR = _SETRESPONSE,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.SetResponse)
  ))
_sym_db.RegisterMessage(SetResponse)

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETREQUEST,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.GetRequest)
  ))
_sym_db.RegisterMessage(GetRequest)

GetResponse = _reflection.GeneratedProtocolMessageType('GetResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETRESPONSE,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.GetResponse)
  ))
_sym_db.RegisterMessage(GetResponse)

Config = _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), dict(
  DESCRIPTOR = _CONFIG,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.Config)
  ))
_sym_db.RegisterMessage(Config)

StreamConfig = _reflection.GeneratedProtocolMessageType('StreamConfig', (_message.Message,), dict(
  DESCRIPTOR = _STREAMCONFIG,
  __module__ = 'p4.server.v1.config_pb2'
  # @@protoc_insertion_point(class_scope:p4.server.v1.StreamConfig)
  ))
_sym_db.RegisterMessage(StreamConfig)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ServerConfigStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Set = channel.unary_unary(
          '/p4.server.v1.ServerConfig/Set',
          request_serializer=SetRequest.SerializeToString,
          response_deserializer=SetResponse.FromString,
          )
      self.Get = channel.unary_unary(
          '/p4.server.v1.ServerConfig/Get',
          request_serializer=GetRequest.SerializeToString,
          response_deserializer=GetResponse.FromString,
          )


  class ServerConfigServicer(object):

    def Set(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ServerConfigServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Set': grpc.unary_unary_rpc_method_handler(
            servicer.Set,
            request_deserializer=SetRequest.FromString,
            response_serializer=SetResponse.SerializeToString,
        ),
        'Get': grpc.unary_unary_rpc_method_handler(
            servicer.Get,
            request_deserializer=GetRequest.FromString,
            response_serializer=GetResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'p4.server.v1.ServerConfig', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaServerConfigServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Set(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Get(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaServerConfigStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Set(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Set.future = None
    def Get(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Get.future = None


  def beta_create_ServerConfig_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('p4.server.v1.ServerConfig', 'Get'): GetRequest.FromString,
      ('p4.server.v1.ServerConfig', 'Set'): SetRequest.FromString,
    }
    response_serializers = {
      ('p4.server.v1.ServerConfig', 'Get'): GetResponse.SerializeToString,
      ('p4.server.v1.ServerConfig', 'Set'): SetResponse.SerializeToString,
    }
    method_implementations = {
      ('p4.server.v1.ServerConfig', 'Get'): face_utilities.unary_unary_inline(servicer.Get),
      ('p4.server.v1.ServerConfig', 'Set'): face_utilities.unary_unary_inline(servicer.Set),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ServerConfig_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('p4.server.v1.ServerConfig', 'Get'): GetRequest.SerializeToString,
      ('p4.server.v1.ServerConfig', 'Set'): SetRequest.SerializeToString,
    }
    response_deserializers = {
      ('p4.server.v1.ServerConfig', 'Get'): GetResponse.FromString,
      ('p4.server.v1.ServerConfig', 'Set'): SetResponse.FromString,
    }
    cardinalities = {
      'Get': cardinality.Cardinality.UNARY_UNARY,
      'Set': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'p4.server.v1.ServerConfig', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
